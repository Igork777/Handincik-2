@page "/AddAdults"
@using Hand_In_2.Data.Model
@using Hand_In_2.Data
@inject IAdultsService AdultsService
@inject NavigationManager NavigationManager

<h3>AddAdults</h3>
<EditForm Model="@newAdult">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        First Name <br/>
        <InputText id="first-name" @bind-Value="newAdult.FirstName"/>
        <p style="color: red">@firstNameError</p>
    </div>
    <div class="form-group">
        Last Name <br/>
        <InputText id="last-name" @bind-Value="newAdult.LastName"/>
        <p style="color: red">@lastNameError</p>
    </div>
    <div class="form-group">
        Hair Color <br/>
        <select @bind="hairColor" class="form-control selectpicker" style="width: 300px">
            <option selected disabled value="-1">Choose the hair color</option>
            <option>blond</option>
            <option>red</option>
            <option>brown</option>
            <option>black</option>
            <option>white</option>
            <option>grey</option>
            <option>blue</option>
            <option>green</option>
            <option>leverpostej</option>
        </select>
    </div>
    <div class="form-group">
        Eye color <br/>
        <select @bind="eyeColor" class="form-control selectpicker" style="width: 300px">
            <option selected disabled value="-1">Choose the eye color</option>
            <option>brown</option>
            <option>grey</option>
            <option>green</option>
            <option>blue</option>
            <option>amber</option>
            <option>hazel</option>
        </select>
    </div>
    <div class="form-group">
        Age <br/>
        <InputText id="age" @bind-Value="age"/>
        <p style="color: red">@ageError</p>
    </div>

    <div class="form-group">
        Weight <br/>
        <InputText id="weight" @bind-Value="weight"/>
        <p style="color: red">@weightError</p>
    </div>
    <div class="form-group">
        Height <br/>
        <InputText id="height" @bind-Value="height"/>
        <p style="color: red">@heightError</p>
    </div>
    <div class="form-group">
        Sex <br/>
        <select @bind="newAdult.Sex" class="form-control selectpicker" style="width: 300px">
            <option selected disabled value="-1">Choose the sex</option>
            <option>F</option>
            <option>M</option>
        </select>
        <p style="color: red">@sexError</p>
    </div>
    <div class="form-group">
        Job title <br/>
        <select @bind="newAdult.JobTitle" class="form-control selectpicker" style="width: 300px">
            <option selected disabled value="-1">Choose the eye job</option>
            <option>Teacher</option>
            <option>Engineering</option>
            <option>Garbage Collector</option>
            <option>Shepherd</option>
            <option>Pilot</option>
            <option>Police Officer</option>
            <option>Pirate</option>
            <option>Fireman</option>
            <option>Astronaut</option>
            <option>Captain</option>
            <option>Solider</option>
            <option>Pizza Chef</option>
            <option>Chef</option>
            <option>Janitor</option>
            <option>Factory Worker</option>
            <option>Chauffeur</option>
            <option>Waitress</option>
            <option>Ninja</option>
            <option>Doctor</option>
            <option>Nurse</option>
            <option>Chemist</option>
            <option>Caretaker</option>
            <option>Gardener</option>
            <option>Mascot</option>
            <option>Athlete</option>
        </select>
    </div>
    <div class="form-group">
        <button class="btn btn-outline-dark" @onclick="AddNewAdult">Add</button>
    </div>
    <p style="color: red">@theSameName</p>
</EditForm>

@code {
    string age, weight, height, eyeColor, hairColor;
    private string ageError, weightError, heightError, firstNameError, lastNameError, sexError, theSameName;
    private Adult newAdult = new Adult();
    private ValidHairColor _validHairColor = new ValidHairColor();
    private ValidEyeColor _validEyeColor = new ValidEyeColor();

    private void AddNewAdult()
    {
        try
        {
            if (_validHairColor.IsValid(hairColor))
            {
                newAdult.HairColor = hairColor;
            }
            if (_validEyeColor.IsValid(eyeColor))
            {
                newAdult.EyeColor = eyeColor;
            }
            newAdult.Id = AdultsService.getAllAdults().Count;
            if (newAdult.FirstName == null)
            {
                firstNameError = "Input the first name";
            }
            else
            {
                firstNameError = "";
            }
            if (newAdult.LastName == null)
            {
                lastNameError = "Input the last name";
            }
            else
            {
                lastNameError = "";
            }
            bool isAgeOk = Int32.TryParse(age, out int resultAge);
            if (!isAgeOk)
            {
                ageError = "Input the number for the age field";
            }
            else if (Int32.Parse(age) < 1)
            {
                ageError = "The age cannot be negative";
            }
            else
            {
                ageError = "";
                newAdult.Age = resultAge;
            }
            bool isWeightOk = float.TryParse(weight, out float resultWeight);
            if (!isWeightOk)
            {
                weightError = "Input the number for the weight field";
            }
            else
            {
                weightError = "";
                newAdult.Weight = resultWeight;
            }
            bool isHeightOk = Int32.TryParse(height, out int resultHeight);
            if (!isHeightOk)
            {
                heightError = "Input the number for the height field";
            }
            else
            {
                heightError = "";
                newAdult.Height = resultHeight;
            }

            if (newAdult.Sex == null)
            {
                sexError = "Sex has to be F or M";
            }
            else
            {
                sexError = "";
            }
            if (newAdult.JobTitle == null)
            {
                newAdult.JobTitle = "Not working";
            }

            if (isAgeOk && isHeightOk && isWeightOk && ageError == "" && weightError == "" && heightError == "" && firstNameError == "" && lastNameError == "" && sexError == "")
            {
                IList<Adult> adults = AdultsService.getAllAdults();
                foreach (Adult adult in adults)
                {
                    if (adult.FirstName.Equals(newAdult.FirstName) && adult.LastName.Equals(newAdult.LastName))
                    {
                        theSameName = "The adult " + newAdult.FirstName + " " + newAdult.LastName + " already exists";
                        return;
                    }
                }
                AdultsService.addAdult(newAdult);
                NavigationManager.NavigateTo("/Adults");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}